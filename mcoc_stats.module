<?php

/**
 * @todo
 *  - Pull the aq-specific functions out of .module and add it to it's own .inc file.
 */

include_once 'mcoc_stats.features.inc';

/**
 * Implements hook_menu.
 */
function mcoc_stats_menu() {
  $items['mcoc/stats/aq/%'] = array(
    'title' => 'AQ Stats',
    'description' => 'Alliance quest stats',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('mcoc_stats_aq', 3),
    'access callback' => TRUE,
    'type' => MENU_NORMAL_ITEM,
    'file' => 'includes/mcoc_stats.aq.inc',
  );

  $items['mcoc/home'] = array(
    'title' => 'Home',
    'description' => 'Provides a homepage containing links to the mcoc content.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('mcoc_stats_home'),
    'access callback' => TRUE,
    'type' => MENU_NORMAL_ITEM,
    'file' => 'includes/mcoc_stats.home.inc',
  );

  $items['mcoc/stats/war'] = array(
    'title' => 'War Stats',
    'description' => 'Alliance war stats',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('mcoc_stats_war'),
    'access callback' => TRUE,
    'type' => MENU_NORMAL_ITEM,
    'file' => 'includes/mcoc_stats.war.inc',
  );

  $items['admin/mcoc'] = array(
    'title' => 'MCOC',
    'description' => 'mcoc sub-menu',
    'access arguments' => array('access administration pages'),
  );

  $items['admin/mcoc/aq-upload-form'] = array(
    'title' => 'AQ Upload Form',
    'description' => 'Allows for uploading multiple bg and individual aq records.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('mcoc_aq_upload_form'),
    'access arguments' => array('access administration pages'),
    'file' => 'includes/mcoc_stats.aq-upload-form.inc',
  );

  $items['admin/mcoc/war-upload-form'] = array(
    'title' => 'War Upload Form',
    'description' => 'Allows for uploading multiple bg and individual war records.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('mcoc_war_upload_form'),
    'access arguments' => array('access administration pages'),
    'file' => 'includes/mcoc_stats.war-upload-form.inc',
  );

  $items['admin/config/mcoc-stats'] = array(
    'title' => 'Marvel Contest of Champions Settings',
    'description' => 'Settings related to the Marvel Contest of Champions statistics.',
    'position' => 'left',
    'weight' => -15,
    'access arguments' => array('access administration pages'),
  );

  $items['admin/config/mcoc-stats/aq-settings'] = array(
    'title' => 'Alliance Quest Settings',
    'description' => 'Settings related to the MCOC alliance quest statistics.',
    'position' => 'left',
    'weight' => 15,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('mcoc_aq_settings_form'),
    'access arguments' => array('access administration pages'),
    'file' => 'includes/mcoc_stats.settings-form-aq.inc',
  );

  $items['admin/config/mcoc-stats/war-settings'] = array(
    'title' => 'Alliance War Settings',
    'description' => 'Settings related to the Marvel Contest of Champions war statistics.',
    'position' => 'left',
    'weight' => 4,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('mcoc_war_settings_form'),
    'access arguments' => array('access administration pages'),
    'file' => 'includes/mcoc_stats.settings-form-war.inc',
  );

  return $items;
}

/**
 *  Implements hook_block_info()
 */
function mcoc_stats_block_info() {
  $blocks['member_aq_points'] = array(
    'info' => t('Individual AQ Points'),
  );

  $blocks['member_war_points'] = array(
    'info' => t('Individual War Points'),
  );

  $blocks['battlegroup_points_over_time'] = array(
    'info' => t('Battlegroup Points Over Time'),
  );

  $blocks['average_member_points'] = array(
    'info' => t('Average Points by Member'),
  );

  $blocks['member_top_points'] = array(
    'info' => t('Top Points (Member)'),
  );

  $blocks['all_member_aq_points'] = array(
    'info' => t('AQ Points by Member'),
  );

  $blocks['all_member_war_points'] = array(
    'info' => t('War Points by Member'),
  );

  $blocks['all_member_missed_aqs'] = array(
    'info' => t('Missed AQs by Member'),
  );

  $blocks['aq_map_selection'] = array(
    'info' => t('AQ Map Selection'),
  );

  $blocks['aq_map_completion'] = array(
    'info' => t('AQ Map Completion'),
  );

  return $blocks;
}

/**
 *  Implements hook_block_view()
 */
function mcoc_stats_block_view($delta = '') {
  $block = array();
  // The $delta parameter tells us which block is being requested.
  switch ($delta) {
    case 'member_aq_points':
      $user_id = arg(1);
      $user = user_load($user_id);
      $records = mcoc_stats_get_records('individual_aq_record', FALSE, NULL, $user_id) ;
      $individual_points_array = array();

      foreach($records as $record) {
        // Load each record so we can pull the stats from it.
        $individiual_entity = node_load($record->nid);
        // Wrap the individual AQ node.
        $individual_wrapper = entity_metadata_wrapper('node', $individiual_entity);
        // Get the points scored.
        $points = $individual_wrapper->field_points->value();
        $group_record_id = $individual_wrapper->field_aq_record->value()->nid;
        // Wrap the bg Aq node.
        $group_wrapper = entity_metadata_wrapper('node', $group_record_id);
        // Categorize the individual array by date since that's how the chart wants it.
        $date_array = $group_wrapper->field_date_range->value();
        $date_parts = explode( ' ', $date_array['value']);
        $timestamp = strtotime($date_parts[0]) * 1000;
        $individual_points_array[$timestamp][$user->name] = $points;
      }  $values = array();

      foreach($individual_points_array as $timestamp => $individuals) {
        foreach($individuals as $name => $points) {
          $values[$name][] = array(
            'x' => $timestamp,
            'y' => (int) $points,
          );
        }
      }

      // Create our chart
      drupal_add_js(array('mcoc_stats' => array('individual_data' => $values)), array('type' => 'setting'));

      $block['content'] = array(
        '#markup' => '<div class="mcoc-chart-container"> <h2>AQ Points</h2> <div class="mcoc-individiual-point-chart mcoc-chart"><div id="individualPointChartContainer">&nbsp;</div></div></div>',
        '#attached' => array(
            'css' => array(
              drupal_get_path('module', 'mcoc_stats') . '/css/mcoc_stats.alliance-aq.css',
            ),
            'js' => array(
              drupal_get_path('module', 'mcoc_stats') . '/js/jquery.canvasjs.min.js',
              drupal_get_path('module', 'mcoc_stats') . '/js/mcoc_stats.individual-aq.js',
          ),
        ),
      );

      break;
    case 'member_war_points':
      break;
    case 'battlegroup_points_over_time':
      break;
    case 'average_member_points':
      break;
    case 'member_top_points':
      break;
    case 'all_member_aq_points':
      break;
    case 'all_member_war_points':
      break;
    case 'all_member_missed_aqs':
      break;
    case 'aq_map_selection':
      break;
    case 'aq_map_completion':
      break;
   }

  return $block;
}

/**
 * Get all of the individual AQ records.
 * Working on moving this to a class.
 */
function mcoc_stats_get_records($type, $top_ten = FALSE, $range = 10, $user = NULL, $bg = NULL) {
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', $type);

  if($top_ten) {
    $query->fieldOrderBy('field_points', 'value', 'DESC')->range(0, $range);
  }

  if (!is_null($user)) {
    $query->fieldCondition('field_member', 'target_id', $user);
  }

  if (!is_null($bg)) {
    $query->fieldCondition('field_bg_', 'value', $bg);
  }

  $records = $query->execute();
  return $records['node'];
}

